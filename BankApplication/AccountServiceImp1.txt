package com.capgemini.service;

import com.capgemini.beans.Account;
import com.capgemini.exception.DepositSuccessfulException;
import com.capgemini.exception.InsufficientOpeningBalanceException;
import com.capgemini.exception.InvalidAccountNumberException;
import com.capgemini.repository.AccountRepository;

public class AccountServiceImp1 implements AccountService {

	AccountRepository accountRepository;

	public AccountServiceImp1(AccountRepository accountRepository) {
		super();
		this.accountRepository = accountRepository;
	}
	
	
	
	@Override
	
		public Account createAccount(int accountNumber, int amount) throws InsufficientOpeningBalanceException
		{
		 	
			if(amount<500)
		 		
		 	{
		 		throw new InsufficientOpeningBalanceException();
		 		
		 	}
		 	
		 	Account account = new Account();
		 	account.setAccountNumber(accountNumber);
		 	
		 	account.setAmount(amount);
		 	
		 	if(accountRepository.save(account))
		 			{
		 				return account;
		 			}
		 	
		 	
			return null;
		}
	
    /*  
	public Account searchAccount(int accountNumber)throws InvalidAccountNumberException
    {
        
       
            Account account=null;
			if(account.getAccountNumber()==accountNumber)
            {
                return account;
            }
        
        throw new InvalidAccountNumberException();
        
    }
    
	@Override
	
	public Account DepositeAmount(int accountNumber,int amount) throws DepositSuccessfulException, InvalidAccountNumberException
    {
        Account account=searchAccount(accountNumber);
        
        if((account.getAmount()+amount)>=0)
        {
            account.setAmount(account.getAmount()+amount);
            throw new DepositSuccessfulException();
        }
        
        throw new InvalidAccountNumberException();
    }
    

	public int withdrawAmount(int accountNumber,int amount) throws InvalidAccountNumberException, InsufficientBalanceException
    {
        Account account=searchAccount(accountNumber);
        
        if((account.getAmount()-amount)>=0)
        {
            account.setAmount(account.getAmount()-amount);
            return account.getAmount();
        }
        
        throw new InsufficientBalanceException();
    }
    
*/
	
	

	
		
}
